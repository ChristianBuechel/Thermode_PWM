// https://wolles-elektronikkiste.de/en/timer-and-pwm-part-2-16-bit-timer1 
//prescale=[1      8      64    256    1024]
//          0.0625 0.5    4     16     64 us resolution
//max cycle 4.1    32.8   262.1 1048.6 4194.3 ms 






unsigned int PP = 99; //gets us 20x16us=320us cycle
//unsigned int AA = PP-0; //full off in inverted mode
//unsigned int BB = PP-2; //pulse of 32 us in inverted mode

unsigned int AA = 99; //full off in inverted mode
unsigned int BB = 98; //pulse of 32 us in inverted mode


unsigned int odd_even = 0; 

void setup(){ 
  // Clear OC1A and OC1B on Compare Match / Set OC1A and OC1B at Bottom; 
  // Wave Form Generator: Fast PWM 14, Top = ICR1

  TIMSK1 = (1<<TOIE1); // interrupt when TCNT1 is overflowed  
  //TCCR1A = (1<<COM1A1) + (1<<COM1B1) + (1<<WGM11); //normal mode
  TCCR1A = (1<<COM1A0) + (1<<COM1B0) + (1<<COM1A1) + (1<<COM1B1) + (1<<WGM11); // inverted mode
  //TCCR1B = (1<<WGM13) + (1<<WGM12) + (1<<CS10); // prescaler = 1 (none) 
  //TCCR1B = (1<<WGM13) + (1<<WGM12) + (1<<CS10)+ (1<<CS11); // prescaler = 64 
  TCCR1B = (1<<WGM13) + (1<<WGM12) + (1<<CS12); // prescaler = 256 
  
  //let's try phase correct PWM
  TCCR1A = (1<<COM1A1) + (1<<COM1B1) + (1<<WGM11); //normal mode
  TCCR1B = (1<<WGM13)  + (1<<CS12); // prescaler = 256 + phase correct PWM 
	  
  
  
  ICR1  = PP;
  OCR1A = AA;
  OCR1B = BB;
  DDRB |= (1<<PB5)|(1<<PB6);
} 

void loop() { 
 // do something else
 


} 

ISR(TIMER1_OVF_vect){

//this allows us to set vales for the next wave.

if (odd_even == 0)
{
  odd_even = 1;
  OCR1A = BB;
  OCR1B = AA;  
  }
  else
  {
  odd_even = 0;
  OCR1A = AA;
  OCR1B = BB;
  }


}
